import { SignRequestPrefillTag } from './signRequestPrefillTag.generated.js';
import { SerializedData } from '../serialization/json.js';
export interface SignRequestBase {
    /**
     * Indicates if the sender should receive a `prepare_url` in the response to complete document preparation using the UI. */
    readonly isDocumentPreparationNeeded?: boolean;
    /**
     * When specified, the signature request will be redirected to this url when a document is signed. */
    readonly redirectUrl?: string | null;
    /**
     * The uri that a signer will be redirected to after declining to sign a document. */
    readonly declinedRedirectUrl?: string | null;
    /**
     * Disables the usage of signatures generated by typing (text). */
    readonly areTextSignaturesEnabled?: boolean;
    /**
     * Subject of sign request email. This is cleaned by sign request. If this field is not passed, a default subject will be used. */
    readonly emailSubject?: string | null;
    /**
     * Message to include in sign request email. The field is cleaned through sanitization of specific characters. However, some html tags are allowed. Links included in the message are also converted to hyperlinks in the email. The message may contain the following html tags including `a`, `abbr`, `acronym`, `b`, `blockquote`, `code`, `em`, `i`, `ul`, `li`, `ol`, and `strong`. Be aware that when the text to html ratio is too high, the email may end up in spam filters. Custom styles on these tags are not allowed. If this field is not passed, a default message will be used. */
    readonly emailMessage?: string | null;
    /**
     * Reminds signers to sign a document on day 3, 8, 13 and 18. Reminders are only sent to outstanding signers. */
    readonly areRemindersEnabled?: boolean;
    /**
     * Name of the signature request. */
    readonly name?: string;
    /**
     * When a document contains sign-related tags in the content, you can prefill them using this `prefill_tags` by referencing the 'id' of the tag as the `external_id` field of the prefill tag. */
    readonly prefillTags?: readonly SignRequestPrefillTag[];
    /**
     * Set the number of days after which the created signature request will automatically expire if not completed. By default, we do not apply any expiration date on signature requests, and the signature request does not expire. */
    readonly daysValid?: number | null;
    /**
     * This can be used to reference an ID in an external system that the sign request is related to. */
    readonly externalId?: string | null;
    /**
     * When a signature request is created from a template this field will indicate the id of that template. */
    readonly templateId?: string | null;
    /**
     * Used as an optional system name to appear in the signature log next to the signers who have been assigned the `embed_url_external_id`. */
    readonly externalSystemName?: string | null;
    readonly rawData?: SerializedData;
}
export declare function serializeSignRequestBase(val: SignRequestBase): SerializedData;
export declare function deserializeSignRequestBase(val: SerializedData): SignRequestBase;
